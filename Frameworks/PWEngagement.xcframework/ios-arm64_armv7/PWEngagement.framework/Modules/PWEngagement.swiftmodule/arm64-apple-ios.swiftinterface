// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PWEngagement
import Foundation
import PWCore
@_exported import PWEngagement
import Swift
extension PWEngagement {
  public static func fetchMessages(startDate: Foundation.Date, endDate: Foundation.Date, completion: @escaping ([Message]?, Swift.Error?) -> Swift.Void)
  public static func markMessageAsRead(messageIdentifier: Swift.String, completion: @escaping (Swift.Error?) -> Swift.Void)
  public static func markMessageAsUnread(messageIdentifier: Swift.String, completion: @escaping (Swift.Error?) -> Swift.Void)
}
extension PWEngagement {
  @objc public static func postMessageEvent(messageIdentifier: Swift.String, completion: @escaping (Swift.Error?) -> Swift.Void)
}
public enum MessageResult {
  case success([Message])
  case failure(MessageCenterError)
}
public enum MessageReadResult {
  case success
  case failure(MessageCenterError)
}
public enum MessageEventResult {
  case success
  case failure(MessageCenterError)
}
public enum MessageCenterError : Swift.String, Swift.Error {
  case unableToComplete
  case invalidResponse
  case invalidData
  case unableToMarkMessage
  case unableToPostMessageEvent
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct MessageEvent : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct MessageRead : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @objcMembers public class Message : ObjectiveC.NSObject, Swift.Codable, Foundation.NSCopying {
  @objc final public let identifier: Swift.String?
  @objc final public let campaignID: Swift.String
  @objc final public let campaignType: Swift.String
  @objc final public let metaData: [Swift.String : Swift.String]?
  @objc final public let alertTitle: Swift.String?
  @objc final public let alertBody: Swift.String?
  @objc final public let promotionTitle: Swift.String?
  @objc final public let promotionBody: Swift.String?
  @objc final public let isRead: Swift.Bool
  @objc final public let timestamp: Foundation.Date?
  @objc public init(identifier: Swift.String?, campaignID: Swift.String, alertTitle: Swift.String?, alertBody: Swift.String?, promotionTitle: Swift.String?, promotionBody: Swift.String?, metaData: [Swift.String : Swift.String]?, campaignType: Swift.String, isRead: Swift.Bool, timestamp: Foundation.Date?)
  @objc public static func unpack(dict: [Swift.String : Any]) -> Message?
  required public init(from decoder: Swift.Decoder) throws
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
}
extension MessageCenterError : Swift.Equatable {}
extension MessageCenterError : Swift.Hashable {}
extension MessageCenterError : Swift.RawRepresentable {}
