// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PWEngagement
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import PWCore
@_exported import PWEngagement
import Swift
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @objcMembers final public class PushNotificationTracker : NSObject {
  @objc public static func didReceiveRemoteNotification(_ userInfo: [AnyHashable : Any])
  @objc public static func willPresent(_ notification: UNNotification)
  @objc public static func didReceive(_ response: UNNotificationResponse)
  @objc override dynamic public init()
  @objc deinit
}
extension PWEngagement {
  public static func fetchMessages(startDate: Date, endDate: Date, completion: @escaping (_ messages: [Message]?, _ error: Error?) -> Void)
  public static func markMessageAsRead(messageIdentifier: String, completion: @escaping (_ error: Error?) -> Void)
  public static func markMessageAsUnread(messageIdentifier: String, completion: @escaping (_ error: Error?) -> Void)
}
extension PWEngagement {
  @objc public static func postMessageEvent(messageIdentifier: String, completion: @escaping (_ error: Error?) -> Void)
}
public enum MessageResult {
  case success([Message])
  case failure(MessageCenterError)
}
public enum MessageReadResult {
  case success
  case failure(MessageCenterError)
}
public enum MessageEventResult {
  case success
  case failure(MessageCenterError)
}
public enum MessageCenterError : String, Error {
  case unableToComplete
  case invalidResponse
  case invalidData
  case unableToMarkMessage
  case unableToPostMessageEvent
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct MessageEvent : Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MessageRead : Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class Message : NSObject, Codable, NSCopying {
  @objc final public let identifier: String?
  @objc final public let campaignID: String
  @objc final public let campaignType: String
  @objc final public let metaData: [String : String]?
  @objc final public let alertTitle: String?
  @objc final public let alertBody: String?
  @objc final public let promotionTitle: String?
  @objc final public let promotionBody: String?
  @objc final public let isRead: Bool
  @objc final public let timestamp: Date?
  @objc public init(identifier: String?, campaignID: String, alertTitle: String?, alertBody: String?, promotionTitle: String?, promotionBody: String?, metaData: [String : String]?, campaignType: String, isRead: Bool, timestamp: Date?)
  @objc public static func unpack(dict: [String : Any]) -> Message?
  required public init(from decoder: Decoder) throws
  @objc public func copy(with zone: NSZone? = nil) -> Any
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension PWEngagement.MessageCenterError : Swift.Equatable {}
extension PWEngagement.MessageCenterError : Swift.Hashable {}
extension PWEngagement.MessageCenterError : Swift.RawRepresentable {}
