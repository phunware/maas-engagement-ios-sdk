// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios15.5-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PWEngagement
import Foundation
import PWCore
@_exported import PWEngagement
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @objcMembers final public class PushNotificationTracker : NSObject {
  @objc public static func didReceiveRemoteNotification(_ userInfo: [AnyHashable : Any])
  @objc public static func willPresent(_ notification: UNNotification)
  @objc public static func didReceive(_ response: UNNotificationResponse)
  @objc override dynamic public init()
  @objc deinit
}
extension PWEngagement {
  @objc public static func fetchMessage(identifier: String, completion: @escaping (_ message: Message?, _ error: Error?) -> Void)
  public static func fetchMessages(startDate: Date, endDate: Date, completion: @escaping (_ messages: [Message]?, _ error: Error?) -> Void)
  public static func markMessageAsRead(messageIdentifier: String, completion: @escaping (_ error: Error?) -> Void)
  public static func markMessageAsUnread(messageIdentifier: String, completion: @escaping (_ error: Error?) -> Void)
}
extension PWEngagement {
  @objc public static func postMessageEvent(campaignIdentifier: String, completion: @escaping (_ messageIdentifier: String?, _ error: Error?) -> Void)
}
public enum MessageRecordResult {
  case success(Message)
  case failure(MessageCenterError)
}
public enum MessageListResult {
  case success([Message])
  case failure(MessageCenterError)
}
public enum MessageReadResult {
  case success
  case failure(MessageCenterError)
}
public enum PostMessageEventResult {
  case success(String)
  case failure(MessageCenterError)
}
public enum MessageCenterError : Error, CustomStringConvertible {
  case badURL
  case unableToComplete(error: Error?)
  case invalidResponse
  case invalidData(error: Error?)
  public var description: String {
    get
  }
}
public struct MessageEventRecord : Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class MessageEvent : NSObject, NSCopying, Codable {
  @objc final public let identifier: String
  @objc final public let deviceIdentifier: String
  @objc final public let appIdentifier: Int
  @objc final public let campaignIdentifier: Int
  @objc final public let isRead: Bool
  @objc final public let sentTime: Int
  @objc final public func copy(with zone: NSZone? = nil) -> Any
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class Message : NSObject, Codable, NSCopying {
  @objc final public let identifier: String?
  @objc final public let campaignIdentifier: Int
  @objc final public let campaignType: String
  @objc final public let metaData: [String : String]?
  @objc final public let alertTitle: String?
  @objc final public let alertBody: String?
  @objc final public let promotionTitle: String?
  @objc final public let promotionBody: String?
  @objc final public let promotionExpirationDate: Date?
  @objc final public let isRead: Bool
  @objc final public let timestamp: Date?
  @objc public init(identifier: String?, campaignIdentifier: Int, alertTitle: String?, alertBody: String?, promotionTitle: String?, promotionBody: String?, promotionExpirationDate: Date?, metaData: [String : String]?, campaignType: String, isRead: Bool, timestamp: Date?)
  required public init(from decoder: Decoder) throws
  @objc public static func unpack(dict: [String : Any]) -> Message?
  @objc public func copy(with zone: NSZone? = nil) -> Any
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Message {
  @objc public static func promotionExpirationDate(fromString dateString: String?) -> Date?
}
public struct MessageRead : Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
