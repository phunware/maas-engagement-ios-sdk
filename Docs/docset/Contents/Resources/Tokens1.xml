<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PWEngagement.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PWEngagement</TokenIdentifier>
			<Abstract type="html">The mobile engagement framework is a location and notification based system.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
            
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/startWithMaasAppId:accessKey:signatureKey:completion:</TokenIdentifier>
			<Abstract type="html">Starts the mobile engagement service with environment.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (void)startWithMaasAppId:(NSString *)maasAppId accessKey:(NSString *)accessKey signatureKey:(NSString *)signatureKey completion:(void ( ^ ) ( NSError *error ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>maasAppId</Name>
					<Abstract type="html">You can find your Application ID in the MaaS portal.</Abstract>
				</Parameter><Parameter>
					<Name>accessKey</Name>
					<Abstract type="html">A unique key that identifies the client making the request. You can find your Access Key in the MaaS portal.</Abstract>
				</Parameter><Parameter>
					<Name>signatureKey</Name>
					<Abstract type="html">A unique key that is used to sign requests. The signature is used to both check request authorization as well as data integrity. You can find your Signature Key in the MaaS portal.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that notify mobile engagement service is successfully started or failed to start with reason.
- param1 error It&apos;s nil when it&apos;s started successfully, or an error object containing information about a problem that indicates mobile engagement service failed to start.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/startWithMaasAppId:accessKey:signatureKey:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/stopWithCompletion:</TokenIdentifier>
			<Abstract type="html">Stop mobile engagement service.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (void)stopWithCompletion:(void ( ^ ) ( NSError *error ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that notify mobile engagement service is successfully stopped or failed to stop with reason.

- error It&apos;s nil when it&apos;s stopped successfully, or an error object containing information about a problem that indicates mobile engagement service failed to stop.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/stopWithCompletion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/geozones</TokenIdentifier>
			<Abstract type="html">All the available PWMEGeozone list.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)geozones</Declaration>
			
			
			<Anchor>//api/name/geozones</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/messages</TokenIdentifier>
			<Abstract type="html">All the available PWMEZoneMessage list.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)messages</Declaration>
			
			
			<Anchor>//api/name/messages</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/deviceId</TokenIdentifier>
			<Abstract type="html">Return the device identifier which the mobile engagement service uses.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (NSString *)deviceId</Declaration>
			
			
			<Anchor>//api/name/deviceId</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/version</TokenIdentifier>
			<Abstract type="html">Return the current SDK version of mobile engagement.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (NSString *)version</Declaration>
			
			
			<Anchor>//api/name/version</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/serviceName</TokenIdentifier>
			<Abstract type="html">The name of the mobile engagement service.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (NSString *)serviceName</Declaration>
			
			
			<Anchor>//api/name/serviceName</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/setErrorHandler:</TokenIdentifier>
			<Abstract type="html">Set the block to handle the error when it occurs.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (void)setErrorHandler:(void ( ^ ) ( NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>handler</Name>
					<Abstract type="html">A block that caused mobile engagement service failed.

- error An error object containing information about a problem that indicates mobile engagement service failed if the results are retrieved successfully.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setErrorHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/setLocalNotificationHandler:</TokenIdentifier>
			<Abstract type="html">Set the block to handle the local notification which is about to display.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (void)setLocalNotificationHandler:(BOOL ( ^ ) ( PWMELocalNotification *notification ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>handler</Name>
					<Abstract type="html">A block that notifies the local notification is about to display, you can control the local notification display and customize the display content.

- notification The PWMELocalNotification object which contains notification information to display.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLocalNotificationHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/didFinishLaunchingWithOptions:withCompletionHandler:</TokenIdentifier>
			<Abstract type="html">Lets the mobile engagement service know that launch process is almost done and the app is almost ready to run.(APNs).</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (void)didFinishLaunchingWithOptions:(NSDictionary *)launchOptions withCompletionHandler:(BOOL ( ^ ) ( PWMELocalNotification *notification ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>launchOptions</Name>
					<Abstract type="html">A dictionary indicating the reason the app was launched (if any). The contents of this dictionary may be empty in situations where the user launched the app directly. For information about the possible keys in this dictionary and how to handle them, see Launch Options Keys.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">A block that tells if user opens the app by tapping a notification.

- notification The notification object if user open the app by tapping a notification from notification tray, otherwise, it&apos;s nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/didFinishLaunchingWithOptions:withCompletionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/didRegisterForRemoteNotificationsWithDeviceToken:</TokenIdentifier>
			<Abstract type="html">Lets the mobile engagement service know that the app successfully registered with Apple Push Notification service (APNs).</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (void)didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken</Declaration>
			<Parameters>
				<Parameter>
					<Name>deviceToken</Name>
					<Abstract type="html">A token that identifies the device to APNs. The token is an opaque data type because that is the form that the provider needs to submit to the APNs servers when it sends a notification to a device. The APNs servers require a binary format for performance reasons. The size of a device token is 32 bytes. Note that the device token is different from the uniqueIdentifier property of UIDevice because, for security and privacy reasons, it must change when the device is wiped.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/didRegisterForRemoteNotificationsWithDeviceToken:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/didFailToRegisterForRemoteNotificationsWithError:</TokenIdentifier>
			<Abstract type="html">Lets the mobile engagement service know that the Apple Push Notification service cannot successfully complete the registration process.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (void)didFailToRegisterForRemoteNotificationsWithError:(NSError *)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">An NSError object that encapsulates information why registration did not succeed. The app can choose to display this information to the user.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/didFailToRegisterForRemoteNotificationsWithError:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/didReceiveLocalNotification:withNotificationHandler:</TokenIdentifier>
			<Abstract type="html">Lets the mobile engagement service know that the app receives a local notification, so that it can process it internally.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (void)didReceiveLocalNotification:(UILocalNotification *)notification withNotificationHandler:(void ( ^ ) ( PWMELocalNotification *notification ))notificationHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>notification</Name>
					<Abstract type="html">A UILocalNotification object.</Abstract>
				</Parameter><Parameter>
					<Name>notificationHandler</Name>
					<Abstract type="html">A block that tells the notification with message which was received.

- notification The notification object which was received.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/didReceiveLocalNotification:withNotificationHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/didReceiveRemoteNotification:withNotificationHandler:</TokenIdentifier>
			<Abstract type="html">Lets the mobile engagement service know that the app receives a remote notification, so that it can process it internally.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (void)didReceiveRemoteNotification:(NSDictionary *)userInfo withNotificationHandler:(void ( ^ ) ( PWMELocalNotification *notification ))notificationHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>userInfo</Name>
					<Abstract type="html">A dictionary that contains information related to the remote notification, potentially including a badge number for the app icon, an alert sound, an alert message to display to the user, a notification identifier, and custom data. The provider originates it as a JSON-defined dictionary that iOS converts to an NSDictionary object; the dictionary may contain only property-list objects plus NSNull.</Abstract>
				</Parameter><Parameter>
					<Name>notificationHandler</Name>
					<Abstract type="html">A block that tells the notification with message which was received.

- notification The notification object which was received.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/didReceiveRemoteNotification:withNotificationHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/didReceiveRemoteNotification:fetchCompletionHandler:withNotificationHandler:</TokenIdentifier>
			<Abstract type="html">Lets the mobile engagement service know that the app receives a remote notification, so that it can process it internally.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (void)didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void ( ^ ) ( UIBackgroundFetchResult ))completionHandler withNotificationHandler:(void ( ^ ) ( PWMELocalNotification *notification ))notificationHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>userInfo</Name>
					<Abstract type="html">A dictionary that contains information related to the remote notification, potentially including a badge number for the app icon, an alert sound, an alert message to display to the user, a notification identifier, and custom data. The provider originates it as a JSON-defined dictionary that iOS converts to an NSDictionary object; the dictionary may contain only property-list objects plus NSNull.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The block to execute when the download operation is complete. When calling this block, pass in the fetch result value that best describes the results of your download operation. You must call this handler and should do so as soon as possible. For a list of possible values, see the UIBackgroundFetchResult type.

- userInfo A dictionary that contains information related to the remote notification, potentially including a badge number for the app icon, an alert sound, an alert message to display to the user, a notification identifier, and custom data. The provider originates it as a JSON-defined dictionary that iOS converts to an NSDictionary object; the dictionary may contain only property-list objects plus NSNull.</Abstract>
				</Parameter><Parameter>
					<Name>notificationHandler</Name>
					<Abstract type="html">A block that tells the notification with message which was received.

- notification: The notification object which was received.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/didReceiveRemoteNotification:fetchCompletionHandler:withNotificationHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/setStaticIdentifier:completion:</TokenIdentifier>
			<Abstract type="html">Set the static identifier to be registered with the current device.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (void)setStaticIdentifier:(NSString *)staticIdentifier completion:(void ( ^ ) ( NSError *error ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>staticIdentifier</Name>
					<Abstract type="html">The identifier that will be associated with the current device identifier.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">The block that notifies the user when static identifier registration is complete, and whether or not there was an error on the registration request.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setStaticIdentifier:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWEngagement/startWithMaasAppId:accessKey:signatureKey:encryptionKey:completion:</TokenIdentifier>
			<Abstract type="html">This method has been deprecated.
Starts the mobile engagement service with environment.</Abstract>
			<DeclaredIn>PWEngagement.h</DeclaredIn>
			
			<Declaration>+ (void)startWithMaasAppId:(NSString *)maasAppId accessKey:(NSString *)accessKey signatureKey:(NSString *)signatureKey encryptionKey:(NSString *)encryptionKey completion:(void ( ^ ) ( NSError *error ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>maasAppId</Name>
					<Abstract type="html">You can find your Application ID in the MaaS portal.</Abstract>
				</Parameter><Parameter>
					<Name>accessKey</Name>
					<Abstract type="html">A unique key that identifies the client making the request. You can find your Access Key in the MaaS portal.</Abstract>
				</Parameter><Parameter>
					<Name>signatureKey</Name>
					<Abstract type="html">A unique key that is used to sign requests. The signature is used to both check request authorization as well as data integrity. You can find your Signature Key in the MaaS portal.</Abstract>
				</Parameter><Parameter>
					<Name>encryptionKey</Name>
					<Abstract type="html">The key used to encrypt and decrypt data that is exchanged between the client and the server. You can find your Encryption Key in the MaaS portal.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that notify mobile engagement service is successfully started or failed to start with reason.
- param1 error It&apos;s nil when it&apos;s started successfully, or an error object containing information about a problem that indicates mobile engagement service failed to start.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/startWithMaasAppId:accessKey:signatureKey:encryptionKey:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
        
        
	</File>
</Tokens>